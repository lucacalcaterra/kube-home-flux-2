---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: openhab
  namespace: default
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://k8s-at-home.com/charts/
      chart: openhab
      version: 1.5.2
      sourceRef:
        kind: HelmRepository
        name: k8s-at-home
        namespace: flux-system
      interval: 5m
  values:
    image:
      tag: 3.2.0
    # openhab:
    #service:
    #main:
    #type: LoadBalancer
    #loadBalancerIP: ${CONFIG_LB_IP_OPENHAB}
    persistence:
      data:
        enabled: true
        accessMode: ReadWriteOnce
        size: 1Gi
        persistentVolumeReclaimPolicy: Retain
    env:
      TZ: ${CONFIG_TIMEZONE}
      EXTRA_JAVA_OPTS: -Duser.timezone=${CONFIG_TIMEZONE}
    ingress:
      main:
        enabled: true
        ingressClassName: "nginx"
        annotations:
          cert-manager.io/cluster-issuer: "letsencrypt-production"
          hajimari.io/enable: "true"
          hajimari.io/icon: "weather-sunset"
          # custom nginx config
          nginx.ingress.kubernetes.io/enable-cors: "true"
          nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
          nginx.ingress.kubernetes.io/cors-allow-headers: "Authorization,Accept,Origin,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range"
          nginx.ingress.kubernetes.io/cors-allow-methods: "GET,POST,OPTIONS,PUT,DELETE,PATCH"

          nginx.ingress.kubernetes.io/configuration-snippet: |
            more_set_headers "Set-Cookie X-OPENHAB-AUTH-HEADER=1";
          nginx.org/server-snippets: |
            proxy_set_header Host                   $http_host;
            proxy_set_header X-Real-IP              $remote_addr;
            proxy_set_header X-Forwarded-For        $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto      $scheme;
            proxy_set_header Upgrade                $http_upgrade;
            proxy_set_header Connection             "Upgrade";
            proxy_set_header Authorization          "";
            satisfy                                 any;
          # type of authentication
          nginx.ingress.kubernetes.io/auth-type: basic
          # name of the secret that contains the user/password definitions
          nginx.ingress.kubernetes.io/auth-secret: basic-auth
          # message to display with an appropriate context why the authentication is required
          nginx.ingress.kubernetes.io/auth-realm: "Autenticazione richiesta"
        hosts:
          - host: "openhab.${SECRET_DOMAIN}"
            paths:
              - path: /
                pathType: Prefix
        tls:
          - hosts:
              - "openhab.${SECRET_DOMAIN}"
            secretName: "openhab-tls"
    # addons vs code
    addons:
      codeserver:
        enabled: true
        image:
          repository: codercom/code-server
          #tag: 4.6.0
        workingDir: "/config"
        args:
          - --auth
          - "none"
          - --user-data-dir
          - "/config/.vscode"
          - --extensions-dir
          - "/config/.vscode"
        ingress:
          enabled: true
          ingressClassName: "nginx"
          annotations:
            cert-manager.io/cluster-issuer: "letsencrypt-production"
            hajimari.io/enable: "true"
            hajimari.io/icon: "weather-sunset"
            nginx.ingress.kubernetes.io/auth-signin: http://oauth2.${SECRET_DOMAIN}/oauth2/start?rd=openhab-code.${SECRET_DOMAIN}
            nginx.ingress.kubernetes.io/auth-url: http://oauth2-proxy.networking.svc.cluster.local/oauth2/auth
          hosts:
            - host: "openhab-code.${SECRET_DOMAIN}"
              paths:
                - path: /
                  pathType: Prefix
          tls:
            - hosts:
                - "openhab-code.${SECRET_DOMAIN}"
              secretName: "openhab-code-tls"
        volumeMounts:
          - name: data
            mountPath: /config
    podAnnotations:
      backup.velero.io/backup-volumes: data
